/**
* AdaptiveGrid
* AdaptiveGrid is a fluid CSS grid framework which adapts to the screen size.
* https://github.com/pea/AdaptiveGrid
*/

/* Column Defaults */

.col {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

/* List of custom column sizes in percentages */

$column_sizes: 10 16.66666666666667 20 25 30 33.3333333333 40 45 50 55 60 66.6666666666 70 80 100;

/* List of custom gutter sizes in pixels */

$gutter_sizes: 5 10 15 20 30 40 50;

/* Delimiter for class names (- or _) */

$delimiter: "-";

.grid {
    
    /* The Grid */
    
    display: flex;
    flex-wrap: wrap;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    
    /* Column Sizes */
    
    .col {
        @each $size in $column_sizes {
            &.perc#{floor($size)} {
                width: #{$size}#{"%"};
            } 
        }
    }
    
    /* Gutter */
    
    @each $size in $gutter_sizes {
        &.gut#{floor($size)} {
            margin: #{"-"}#{$size/2}#{"px"};
        }
    }
    
    @each $size in $gutter_sizes {
        &.gut#{floor($size)} .col {
            padding: #{$size/2}#{"px"};
        }
    }
    
    /* Outer Gutter */
    
    @each $size in $gutter_sizes {
        &.gut#{floor($size)}.outergut {
            margin: 0; padding: #{$size/2}#{"px"};
        }
    }

}

/**
* Responses 
*/


/* Phones and smartphones in portrait */
@media all and (min-width: 0) and (max-width: 480px){ /* Smallest */

    /**
    * Adaptive Framework
    */

    /* Hiding */
    .smallest#{$delimiter}hide { display: none; }
    
    /* Grid */
    .grid {
    	.col {
            @each $size in $column_sizes {
                &.smallest#{$delimiter}to#{$delimiter}#{floor($size)} {
                    width: #{$size}#{"%"};
                } 
            }
	    }
    }
  
}
 
/* Small smartphones in landscape (iPhone in landscape) */
@media all and (min-width: 481px) and (max-width: 600px){ /* Smaller */

    /**
    * Adaptive Framework
    */

    /* Hiding */
    .smaller#{$delimiter}hide { display: none; }

    /* Grid */
    .grid {
	    .col {
            @each $size in $column_sizes {
                &.smaller#{$delimiter}to#{$delimiter}#{floor($size)} {
                    width: #{$size}#{"%"};
                } 
            }
	    }
    }
    
}
 
/* Small tablets and large phones in landscape (Nexus 7) */
@media all and (min-width: 601px) and (max-width: 767px) { /* Small */

    /**
    * Adaptive Framework
    */

    /* Hiding */
    .small#{$delimiter}hide { display: none; }

    /* Grid */
    .grid {
	    .col {
            @each $size in $column_sizes {
                &.small#{$delimiter}to#{$delimiter}#{floor($size)} {
                    width: #{$size}#{"%"};
                } 
            }
	    }
	}
    
}
 
/* Large tablets and Facebook iframe (iPad in portrait, Facebook on desktop) */
@media all and (min-width: 768px) and (max-width: 1023px){ /* Medium */

    /**
    * Adaptive Framework
    */

    /* Hiding */
    .medium#{$delimiter}hide { display: none; }
    
    /* Grid */
    .grid {
	    .col {
            @each $size in $column_sizes {
                &.medium#{$delimiter}to#{$delimiter}#{floor($size)} {
                    width: #{$size}#{"%"};
                } 
            }
	    }
    }
 
}

/* Large tablets (iPad in landscape) */
@media all and (min-width: 1024px) and (max-width: 1199px){ /* Large */

    /**
    * Adaptive Framework
    */

    /* Hiding */
    .large#{$delimiter}hide { display: none; }

    /* Grid */
    .grid {
	    .col {
            @each $size in $column_sizes {
                &.large#{$delimiter}to#{$delimiter}#{floor($size)} {
                    width: #{$size}#{"%"};
                } 
            }
	    }
    }
    
}
 
/* Laptops and desktops */
@media all and (min-width: 1200px){ /* Larger */

    /**
    * Adaptive Framework
    */

    /* Hiding */
    .larger#{$delimiter}hide { display: none; }

    /* Grid */
    .grid {
	    .col {
            @each $size in $column_sizes {
                &.larger#{$delimiter}to#{$delimiter}#{floor($size)} {
                    width: #{$size}#{"%"};
                } 
            }
	    }
    }
    
}